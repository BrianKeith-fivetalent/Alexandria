AWSTemplateFormatVersion: "2010-09-09"
Description: "IAM Template for various security roles"
# ----------------------------------------------------------------------------------------
# - Author: Brian Keith
# - Date: 05 AUG 2020
# - Name: CF_acloudguru_IAM.yml
# - Title: IAM Security Roles
# - Version: 0.1
# - Purpose: creates various AWS IAM roles for later cloudformation
# -
# ----------------------------------------------------------------------------------------- 



Parameters:
  AppName:
    Default: acgmarketing
    Description: Name of the application, will be part of prefix naming convention
    Type: String
  AppEnvironmentName:
    Description: Environment - prod, stage, dev - will be part of prefix naming convention
    Type: String
    Default: dev
    AllowedValues:
    - production
    - prod
    - staging
    - qa
    - development
    - dev
    - preprod
    - sandbox
    - develop
    ConstraintDescription: Must be production, prod, staging, qa, development, dev,
      preprod, sandbox, develop

#   GitRepositorySourceName:
#     Description: CODECOMMIT or GITHUB
#     Type: String
#     Default: GITHUB
#     AllowedValues:
#     - CODECOMMIT
#     - GITHUB
#     ConstraintDescription: Must be CODECOMMIT or GITHUB

# Conditions:
#   IsCodeCommit:
#     Fn::Equals:
#     - Ref: GitRepositorySourceName
#     - CODECOMMIT
#   IsGitHub:
#     Fn::Equals:
#     - Ref: GitRepositorySourceName
#     - GITHUB

Resources:
  codeBuildRole:
  #This role will be used to create the CodeBuild Pipeline
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}}'
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      RoleName:
        Fn::Sub: "${AppName}-${AppEnvironmentName}-codebuild-service-role"
  
  codePipelineRole:
  #This role will be used with the Code Pipeline
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}}'
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      RoleName:
        Fn::Sub: "${AppName}-${AppEnvironmentName}-codepipeline-service-role"
    DependsOn: "codeBuildRole"

  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Sub: "${AppName}-${AppEnvironmentName}-ecs-execution-role"
#      !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'ExecutionRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'


Outputs:
  codeBuildRole:
    Description: Role for use with CodeBuilder
    Value: !Ref codeBuildRole
  codePipelineRole:
    Description: Role for use with codePipelineRole
    Value: !Ref codePipelineRole
  ExecutionRole:
    Description: Access Role for ECS-Tasks
    Value: !Ref ExecutionRole

