AWSTemplateFormatVersion: "2010-09-09"
Description: "IAM Template for various security roles"
# ----------------------------------------------------------------------------------------
# - Author: Brian Keith
# - Date: 05 AUG 2020
# - Name: CF_acloudguru_IAM.yml
# - Title: IAM Security Roles
# - Version: 0.1
# - Purpose: creates various AWS IAM roles for later cloudformation
# -
# ----------------------------------------------------------------------------------------- 



Parameters:
  AppName:
    Default: acgmarketing
    Description: Name of the application, will be part of prefix naming convention
    Type: String
  AppEnvironmentName:
    Description: Environment - prod, stage, dev - will be part of prefix naming convention
    Type: String
    Default: dev
    AllowedValues:
    - production
    - prod
    - staging
    - qa
    - development
    - dev
    - preprod
    - sandbox
    - develop
    ConstraintDescription: Must be production, prod, staging, qa, development, dev,
      preprod, sandbox, develop

#   GitRepositorySourceName:
#     Description: CODECOMMIT or GITHUB
#     Type: String
#     Default: GITHUB
#     AllowedValues:
#     - CODECOMMIT
#     - GITHUB
#     ConstraintDescription: Must be CODECOMMIT or GITHUB

# Conditions:
#   IsCodeCommit:
#     Fn::Equals:
#     - Ref: GitRepositorySourceName
#     - CODECOMMIT
#   IsGitHub:
#     Fn::Equals:
#     - Ref: GitRepositorySourceName
#     - GITHUB

Resources:
  codeBuildRole:
  #This role will be used to create the CodeBuild Pipeline
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}}'
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      RoleName:
        Fn::Sub: "${AppName}-${AppEnvironmentName}-codebuild-service-role"
  
  # CodePipelineApproverAccess:
  # #This policy attaches to the CodePipelineROle
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     PolicyName: pol_codepipelineApproverAccess
  #     PolicyDocument:
  #       Version: "2012-10-17",
  #       Statement: 
  #         - Effect: Allow
  #           Resource: "*"
  #           Action": 
  #             - 'codepipeline:GetPipeline'
  #             - 'codepipeline:GetPipelineState'
  #             - 'codepipeline:GetPipelineExecution'
  #             - 'codepipeline:ListPipelineExecutions'
  #             - 'codepipeline:ListPipelines'
  #             - 'codepipeline:PutApprovalResult'




#   codebuildrolepolicy: 
#     Type: 'AWS::IAM::Policy'
#     Properties: 
#       PolicyName: pol_codebuild
#       PolicyDocument: 
#         Version: "2012-10-17"
#         Statement: 
#           - Effect: Allow
#             Resource: "*"
#             Action: 
# #             - '' "Action": [ "iam:PassRole"             ],
#               - 'codecommit:CancelUploadArchive'
#               -  codecommit:GetBranch'
#               - 'codecommit:GetCommit'
#               - 'codecommit:GetUploadArchiveStatus'
#               - 'codecommit:UploadArchive'
#           - Effect: Allow
#             Resource: "*"
#             Action: 
#               - 'codedeploy:CreateDeployment'
#               - 'codedeploy:GetApplication'
#               - 'codedeploy:GetApplicationRevision'
#               - 'codedeploy:GetDeployment'
#               - 'codedeploy:GetDeploymentConfig'
#               - 'codedeploy:RegisterApplicationRevision'

#            "Resource": "*",
#             "Effect": "Allow",
#             "Condition": {
#                 "StringEqualsIfExists": {
#                     "iam:PassedToService": [
#                         "cloudformation.amazonaws.com",
#                         "elasticbeanstalk.amazonaws.com",
#                         "ec2.amazonaws.com",
#                         "ecs-tasks.amazonaws.com"
#                     ]
#                 }
#             }
#         },
  
#         {
#             "Action": [

#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Action": [
#                 "codestar-connections:UseConnection"
#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Action": [
#                 "elasticbeanstalk:*",
#                 "ec2:*",
#                 "elasticloadbalancing:*",
#                 "autoscaling:*",
#                 "cloudwatch:*",
#                 "s3:*",
#                 "sns:*",
#                 "cloudformation:*",
#                 "rds:*",
#                 "sqs:*",
#                 "ecs:*"
#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Action": [
#                 "lambda:InvokeFunction",
#                 "lambda:ListFunctions"
#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Action": [
#                 "opsworks:CreateDeployment",
#                 "opsworks:DescribeApps",
#                 "opsworks:DescribeCommands",
#                 "opsworks:DescribeDeployments",
#                 "opsworks:DescribeInstances",
#                 "opsworks:DescribeStacks",
#                 "opsworks:UpdateApp",
#                 "opsworks:UpdateStack"
#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Action": [
#                 "cloudformation:CreateStack",
#                 "cloudformation:DeleteStack",
#                 "cloudformation:DescribeStacks",
#                 "cloudformation:UpdateStack",
#                 "cloudformation:CreateChangeSet",
#                 "cloudformation:DeleteChangeSet",
#                 "cloudformation:DescribeChangeSet",
#                 "cloudformation:ExecuteChangeSet",
#                 "cloudformation:SetStackPolicy",
#                 "cloudformation:ValidateTemplate"
#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Action": [
#                 "codebuild:BatchGetBuilds",
#                 "codebuild:StartBuild"
#             ],
#             "Resource": "*",
#             "Effect": "Allow"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "devicefarm:ListProjects",
#                 "devicefarm:ListDevicePools",
#                 "devicefarm:GetRun",
#                 "devicefarm:GetUpload",
#                 "devicefarm:CreateUpload",
#                 "devicefarm:ScheduleRun"
#             ],
#             "Resource": "*"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "servicecatalog:ListProvisioningArtifacts",
#                 "servicecatalog:CreateProvisioningArtifact",
#                 "servicecatalog:DescribeProvisioningArtifact",
#                 "servicecatalog:DeleteProvisioningArtifact",
#                 "servicecatalog:UpdateProduct"
#             ],
#             "Resource": "*"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "cloudformation:ValidateTemplate"
#             ],
#             "Resource": "*"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "ecr:DescribeImages"
#             ],
#             "Resource": "*"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "states:DescribeExecution",
#                 "states:DescribeStateMachine",
#                 "states:StartExecution"
#             ],
#             "Resource": "*"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "appconfig:StartDeployment",
#                 "appconfig:StopDeployment",
#                 "appconfig:GetDeployment"
#             ],
#             "Resource": "*"
#         }
#     ],
#     "Version": "2012-10-17"
# }





  codePipelineRole:
  #This role will be used with the Code Pipeline
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}}'
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      RoleName:
        Fn::Sub: "${AppName}-${AppEnvironmentName}-codepipeline-service-role"
    DependsOn: "codeBuildRole"


Outputs:
  codeBuildRole:
    Description: Role for use with CodeBuilder
    Value: !Ref codeBuildRole
  codePipelineRole:
    Description: Role for use with codePipelineRole
    Value: !Ref codePipelineRole